#!/bin/bash

usage() {
	err "Invalid usage. Usage: "
	err "\t$0 init"
	err "\t$0 attach <json params>"
	err "\t$0 detach <mount device>"
	err "\t$0 mount <mount dir> <mount device> <json params>"
	err "\t$0 unmount <mount dir>"
	exit 1
}

err() {
	echo -ne $* 1>&2 '\n'
}

log() {
	echo -ne $* >&1
}

detach() {
	log "{\"status\": \"Not supported\" }"
	exit 0
}

ismounted() {
	MOUNT=`findmnt -n ${MNTPATH} 2>/dev/null | cut -d' ' -f1`
	if [ "${MOUNT}" == "${MNTPATH}" ]; then
		echo "1"
	else
		echo "0"
	fi
}

unmount() {
	MNTPATH=$1
	echo $1 $2 $3 $4 >> unmount.log
	if [ $(ismounted) -eq 0 ] ; then
		log "{\"status\": \"Success\"}"
		exit 0
	fi

	umount ${MNTPATH} &> /dev/null
	if [ $? -ne 0 ]; then
		err "{ \"status\": \"Failed\", \"message\": \"Failed to unmount volume at ${MNTPATH}\"}"
		exit 1
	fi
	rmdir ${MNTPATH} &> /dev/null

	log "{\"status\": \"Success\"}"
	exit 0
}

attach() {
	log "{\"status\": \"Not supported\" }"
	exit 0
}


getvolumename() {
	log "{\"status\": \"Not supported\" }"
        exit 0
}

waitforattach() {
# Whatever, you can't attach/detach/waitforattach a LizardFS volume (same as NFS) : return some junk
  log "{\"status\": \"Success\", \"device\": \"/dev/bounded-local\"}"
  exit
}


domount() {

	MNTPATH=$1
	LFSFOLDER=${MNTPATH##*/}

	# Okay, I want to provision the folder in the root of my LizardFS : each pod bound to a PVC bound to a PV has a folder created (folder name is the PV name bound to the PVC)
	# Obvisouly you need to have a fuse mountpoint on /mnt pointing to the root of your LizardFS.
	# TO DO : Automated quickmount -> mkdir -> unmount so all the logic is embedded in the flexvolume driver.
	mkdir -p /mnt/$LFSFOLDER

	# It appears the controllers do a first request on mount with the following arguments :
	# /var/lib/kubelet/plugins/kubernetes.io/flexvolume/lowet84/lizardfs/mounts/mfs-volume /dev/bounded-local {"host":"mfsmaster","kubernetes.io/fsType":"","kubernetes.io/readwrite":"rw","port":"9421"}
	#   $PATH (we don't want to mount that obvisouly) 			$DEV 	$JSON_OPTS
	# I don't know the usefulness of this, thus, we return success for the subsequent query with the correct parameters
	if [ $# -eq 3 ]
  	then
		log "{\"status\": \"Success\"}"
		exit 0
	else
	# /var/lib/kubelet/pods/c6f7f490-6009-11e7-83d0-005056af1192/volumes/lowet84~lizardfs/mfs-volume {"host":"mfsmaster","kubernetes.io/fsType":"","kubernetes.io/readwrite":"rw","port":"9421"}
	#  $PATH		$JSON_OPTS
		HOST=$(echo $2|jq -r '.["host"]')
		PORT=$(echo $2|jq -r '.["port"]')
	fi

	if [ $(ismounted) -eq 1 ] ; then
		log "{\"status\": \"Success\"}"
		exit 0
	fi

	mkdir -p ${MNTPATH} &> /dev/null
        echo "mfsmount -H $HOST -P $PORT -o big_writes,nosuid,nodev,noatime -S $LFSFOLDER $MNTPATH" >> mount.log

	mfsmount -H $HOST -P $PORT -o big_writes,nosuid,nodev,noatime -S $LFSFOLDER $MNTPATH &> /dev/null

	if [ $? -ne 0 ]; then
		err "{ \"status\": \"Failure\", \"message\": \"Failed to mount lizardfs at ${MNTPATH}\"}"
		exit 1
	fi
	log "{\"status\": \"Success\"}"
	exit 0
}

op=$1

if [ "$op" = "init" ]; then
	log "{\"status\": \"Success\"}"
	exit 0
fi

if [ $# -lt 2 ]; then
	usage
fi

shift

case "$op" in
	attach)
		attach $*
		;;
	detach)
		detach $*
		;;
	mount)
		domount $*
		;;
	mountdevice)
		domount $*
		;;
	unmount)
		unmount $*
		;;
	getvolumename)
		getvolumename $*
		;;
	waitforattach)
		waitforattach $*
		;;
	*)
		usage
esac

exit 1
